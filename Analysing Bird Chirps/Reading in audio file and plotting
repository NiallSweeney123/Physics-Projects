import wave
import numpy as np
import matplotlib.pyplot as plt
import scipy.io.wavfile as wav

wav_obj = wave.open('H:\Physics-Projects\Analysing Bird Chirps\PurpleFinch2.wav', 'rb')
sample_freq = wav_obj.getframerate()
print(f'The total number of samples {sample_freq} times per second')

n_samples = wav_obj.getnframes()
print(f'The total number of samples in the file is {n_samples}')

t_audio = n_samples / sample_freq
print(f'The length of the audio file is {t_audio} seconds long')

n_channels = wav_obj.getnchannels()
print(f'The number of channels is {n_channels}')

# Read frames
signal_wave = wav_obj.readframes(n_samples)

# Convert to numpy array
if n_channels == 2:
    signal_array = np.frombuffer(signal_wave, dtype=np.int16)
    # For stereo, split into two channels
    signal_array_left = signal_array[::2]  # Left channel
    signal_array_right = signal_array[1::2]  # Right channel
    signal_array = signal_array_left  # Use left channel for plotting
else:
    signal_array = np.frombuffer(signal_wave, dtype=np.int16)

# Create time axis
times = np.linspace(0, t_audio, num=n_samples)

# Plotting the signal amplitude
plt.figure(figsize=(15, 5))
plt.plot(times, signal_array)
plt.title('Chirp')
plt.xlabel('Time / s')
plt.ylabel('Signal Volume')
plt.savefig('Chirp')

#Plotting the frequency spectrum
plt.figure(figsize = (15,5))
plt.specgram(signal_array, Fs = sample_freq, vmin = -20, vmax = 50)
plt.title(' Chirp Frequencies')
plt.xlabel('Time / s')
plt.ylabel('Frequency / Hz')
plt.colorbar()
plt.savefig('Chirp Freq')

