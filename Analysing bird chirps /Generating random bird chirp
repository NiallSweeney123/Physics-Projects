import numpy as np 

import matplotlib.pyplot as plt 

import random 

 

duration =0.1 # Duration of the chirp in seconds 

sampling_rate = 10000 # Sampling rate in Hz (increase to make smoother waveform i.e more points) 

 

# Generating random starting and ending frequencies  

min_start_frequency = 20 

max_start_frequency = 100 

min_end_frequency = 100 

max_end_frequency = 500 

 

start_frequency = random.uniform(min_start_frequency, max_start_frequency) 

end_frequency = random.uniform(min_end_frequency, max_end_frequency) 

 

# Generating time vector 

t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False) 

 

# Generating the linear chirp  

chirp_signal = np.sin(2 * np.pi * np.linspace( 

    start_frequency, end_frequency, len(t)) * t) 

 

# Plotting the linear chirp  

plt.figure(figsize=(10, 4)) 

plt.plot(t, chirp_signal) 

plt.title("Random Linear Chirp Waveform") 

plt.xlabel("Time (s)") 

plt.ylabel("Amplitude") 

plt.grid(True) 

plt.savefig('Random Linear Waveform') 

 

#Plotting a spectrogram of the linear chirp 

plt.figure(figsize=(10, 4)) 

plt.specgram(chirp_signal, Fs=sampling_rate, cmap='viridis') 

plt.title("Spectrogram of Linear Chirp Waveform") 

plt.xlabel("Time (s)") 

plt.ylabel("Frequency (Hz)") 

plt.colorbar(label='Intensity (dB)') 

plt.ylim(0,500) 

 

plt.tight_layout() 

plt.savefig('Spectrogram of Linear Chirp Waveform') 

 

 

# Perform FFT on a segment of the waveform 

start_seg = int(0.2 * len(t))  

end_seg = int(0.8 * len(t))     

segment = chirp_signal[start_seg:end_seg] 

 

# Calculating the FFT 

fft_result = np.fft.fft(segment) 

frequencies = np.fft.fftfreq(len(fft_result), 1 / sampling_rate) 

 

# Plotting the FFT 

plt.subplot(2, 1, 2) 

plt.plot(frequencies, np.abs(fft_result)) 

plt.title("FFT of Segment") 

plt.xlabel("Frequency (Hz)") 

plt.ylabel("Amplitude") 

plt.grid(True) 

 

plt.tight_layout() 

plt.savefig('FFT of Segment') 


 
 
